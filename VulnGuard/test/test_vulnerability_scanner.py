import sys
import os
import pytest
import json
import subprocess

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from vulnerability_scanner import read_requirements_txt, read_package_json, query_vulnerabilities, generate_report

# Mock data for vulnerabilities
MOCK_VULNERABILITIES = {
    "requests": {
        "vulnerabilities": [
            {
                "id": "CVE-2021-33503",
                "description": "The requests package before 2.25.1 for Python sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
            }
        ],
        "fixed_version": "2.25.1",
        "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-33503"
    },
    "flask": {
        "vulnerabilities": [
            {
                "id": "CVE-2019-1010083",
                "description": "The Pallets Project Flask before 1.0 is affected by: unexpected memory usage. The impact is: denial of service. The attack vector is: crafted encoded JSON data. The fixed version is: 1.0."
            }
        ],
        "fixed_version": "1.0",
        "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-1010083"
    }
}

# Mock function to simulate querying vulnerabilities
def mock_query_vulnerabilities(dependencies):
    return {dep: MOCK_VULNERABILITIES[dep]["vulnerabilities"] for dep in dependencies}

MOCK_SEARCHSPLOIT_OUTPUT = """
-------------------------------------------------------------------------------------------------------------- ---------------------------------
Exploit Title | Path
-------------------------------------------------------------------------------------------------------------- ---------------------------------
requests - HTTP Authorization Header Redirection | python/webapps/49772.txt
flask - Unexpected Memory Usage | python/webapps/12345.txt
-------------------------------------------------------------------------------------------------------------- ---------------------------------
"""

# Test reading requirements.txt
def test_read_requirements_txt():
    dependencies = read_requirements_txt('test/test_requirements.txt')  # Corrected path
    assert dependencies == ['requests==2.24.0', 'flask==1.0.2']

# Test reading package.json
def test_read_package_json():
    dependencies = read_package_json('test/test_package.json')
    assert dependencies == {
        "express": "4.16.4",
        "lodash": "4.17.11"
    }

# Test querying vulnerabilities
def test_query_vulnerabilities(mocker):
    mocker.patch('subprocess.run', return_value=mocker.Mock(stdout=MOCK_SEARCHSPLOIT_OUTPUT))
    dependencies = {
        "requests": "2.24.0",
        "flask": "1.0.2"
    }
    vulnerabilities = query_vulnerabilities(dependencies)
    assert vulnerabilities == {
        "requests": [
            {
                "id": "requests - HTTP Authorization Header Redirection",
                "description": "python/webapps/49772.txt",
                "fixed_version": "2.25.1",
                "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-33503"
            }
        ],
        "flask": [
            {
                "id": "flask - Unexpected Memory Usage",
                "description": "python/webapps/12345.txt",
                "fixed_version": "1.0",
                "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-1010083"
            }
        ]
    }

# Test generating report
def test_generate_report():
    dependencies = {
        "requests": "2.24.0",
        "flask": "1.0.2"
    }
    vulnerabilities = mock_query_vulnerabilities(dependencies)
    report = generate_report(vulnerabilities)
    assert "Dependency: requests" in report
    assert "Vulnerability: CVE-2021-33503" in report
    assert "The requests package before 2.25.1 for Python" in report
    assert "Dependency: flask" in report
    assert "Vulnerability: CVE-2019-1010083" in report
    assert "The Pallets Project Flask before 1.0 is affected by: unexpected memory usage" in report

# Test main functionality
def test_main(mocker, capsys):
    def side_effect(command, *args, **kwargs):
        if command[1].startswith("requests"):
            return mocker.Mock(stdout=MOCK_SEARCHSPLOIT_OUTPUT)
        else:
            return mocker.Mock(stdout="")

    mocker.patch('subprocess.run', side_effect=side_effect)
    main()
    captured = capsys.readouterr()
    assert "Dependency: requests" in captured.out
    assert "Vulnerability: requests - HTTP Authorization Header Redirection" in captured.out
    assert "Dependency: flask" in captured.out
    assert "Dependency: express" in captured.out
    assert "Dependency: lodash" in captured.out

# Main function for testing
def main():
    dependencies = {}

    # Read requirements.txt
    if os.path.exists('test/test_requirements.txt'):
        dependencies.update({dep.split('==')[0]: dep.split('==')[1] for dep in read_requirements_txt('test/test_requirements.txt')})

    # Read package.json
    if os.path.exists('test/test_package.json'):
        dependencies.update(read_package_json('test/test_package.json'))

    # Query vulnerabilities
    vulnerabilities = query_vulnerabilities(dependencies)

    # Generate report
    report = generate_report(vulnerabilities)
    print(report)

if __name__ == "__main__":
    pytest.main()