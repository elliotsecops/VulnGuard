import subprocess
import os
import logging
import sys

# Constants
TEST_REQUIREMENTS_TXT = 'test/test_requirements.txt'

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def parse_vulnerabilities(output):
    vulnerabilities = []
    lines = output.strip().split('\n')[2:]  # Skip header lines
    for line in lines:
        parts = line.strip().split()
        if len(parts) >= 4:
            package = parts[0]
            version = parts[1]
            vulnerability_id = parts[2]
            fix_version = parts[3] if len(parts) > 3 else 'Not specified'
            vulnerabilities.append({
                'package': package,
                'version': version,
                'vulnerability_id': vulnerability_id,
                'fix_version': fix_version
            })
    return vulnerabilities

def check_vulnerabilities(requirements_file):
    # Ensure requirements.txt exists
    if not os.path.exists(requirements_file):
        logger.error(f"File not found: {requirements_file}")
        return

    # Check for vulnerabilities
    try:
        result = subprocess.run(['pip-audit', '-r', requirements_file], capture_output=True, text=True)
        print(result.stdout)
        vulnerabilities = parse_vulnerabilities(result.stdout)
        if vulnerabilities:
            logger.error("Vulnerabilities found!")
            for vuln in vulnerabilities:
                logger.warning(f"Package: {vuln['package']}, Version: {vuln['version']}, "
                               f"Vulnerability ID: {vuln['vulnerability_id']}, "
                               f"Fix Version: {vuln['fix_version']}")
        else:
            logger.info("No vulnerabilities found!")
    except Exception as e:
        logger.error(f"An error occurred: {e}")

def main():
    if len(sys.argv) < 2:
        logger.error("Usage: python vulnerability_scanner.py <path_to_requirements.txt>")
        return

    requirements_file = sys.argv[1]
    try:
        check_vulnerabilities(requirements_file)
    except Exception as e:
        logger.error(f"An error occurred: {e}")

if __name__ == "__main__":
    main()