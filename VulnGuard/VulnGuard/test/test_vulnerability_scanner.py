import sys
import os
import pytest
import subprocess

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from vulnerability_scanner import check_vulnerabilities, parse_vulnerabilities

# Mock data for vulnerabilities
MOCK_PIP_AUDIT_OUTPUT = """
Name    Version ID                  Fix Versions
-------- ------- ------------------- ------------
requests 2.24.0 PYSEC-2023-74       2.31.0
flask    1.0.2  GHSA-9wx4-h78v-vm56 2.32.0
"""

def test_parse_vulnerabilities():
    vulnerabilities = parse_vulnerabilities(MOCK_PIP_AUDIT_OUTPUT)
    assert len(vulnerabilities) == 2
    assert vulnerabilities[0] == {
        'package': 'requests',
        'version': '2.24.0',
        'vulnerability_id': 'PYSEC-2023-74',
        'fix_version': '2.31.0'
    }
    assert vulnerabilities[1] == {
        'package': 'flask',
        'version': '1.0.2',
        'vulnerability_id': 'GHSA-9wx4-h78v-vm56',
        'fix_version': '2.32.0'
    }

def test_check_vulnerabilities(mocker, caplog):
    mocker.patch('subprocess.run', return_value=mocker.Mock(stdout=MOCK_PIP_AUDIT_OUTPUT, returncode=1))
    check_vulnerabilities('test/test_requirements.txt')
    assert "Vulnerabilities found!" in caplog.text
    assert "Package: requests, Version: 2.24.0, Vulnerability ID: PYSEC-2023-74, Fix Version: 2.31.0" in caplog.text
    assert "Package: flask, Version: 1.0.2, Vulnerability ID: GHSA-9wx4-h78v-vm56, Fix Version: 2.32.0" in caplog.text

if __name__ == "__main__":
    pytest.main()